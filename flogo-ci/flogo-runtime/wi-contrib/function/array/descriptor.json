{"name":"array","type":"flogo:function","version":"0.10.0","titile":"","description":"arrayFunctions","homepage":"","functions":[{"args":[{"name":"items","type":"array","valueType":"any"},{"name":"item","type":"any"}],"description":"Append item to exist array","example":"array.append($activity[xxx].array, \"new Item\") =\u003e [$activity.array, \"new Item\"]","name":"append","return":{"type":"array","valueType":"any"}},{"args":[{"name":"array","type":"array","valueType":"any"},{"name":"item","type":"any"}],"description":"Returns true if the item is found in the given array else returns false. The item type must match with the array type.","example":"array.contains(array.create(\"A\",\"B\",\"C\"), \"B\") =\u003e true","name":"contains","return":{"type":"boolean"}},{"args":[{"name":"items","type":"array","valueType":"any"}],"description":"Count the length of an array","example":"array.count($activity.array) =\u003e  2","name":"count","return":{"type":"int"}},{"args":[{"name":"item1","type":"any"},{"name":"item2","type":"any"}],"description":"Create an array of *primitive types* from the given items. All items must be same primitive types e.g. string, integer etc and must match with the field type where this function is used.","example":"array.create(\"A\",\"B\",\"C\") =\u003e [\"A\",\"B\",\"C\"]","name":"create","return":{"type":"array","valueType":"any"},"varArgs":true},{"args":[{"name":"items","type":"array","valueType":"any"},{"name":"index","type":"int"}],"description":"Delete the specific index of item in an array","example":"array.delete(array.create(\"item1\",\"item2\"), 1) =\u003e [item1]","name":"delete","return":{"type":"array","valueType":"any"}},{"args":[{"name":"items","type":"array","valueType":"any"},{"name":"index","type":"int"}],"description":"Get the specify index of item in an array","example":"array.get(array.create(\"item1\",\"item2\"), 1) =\u003e item2","name":"get","return":{"type":"any"}},{"args":[{"name":"items","type":"array","valueType":"any"}],"description":"Sum all element of the array and the array must be number array =\u003e it returns float64","example":"array.sum(array.create(1,2)) =\u003e 3","name":"sum","return":{"type":"float64"}},{"args":[{"name":"items","type":"array","valueType":"any"},{"name":"start","type":"int"},{"name":"end","required":false,"type":"int"}],"description":"Extracts a part an array by specifying a half-open range with start index and an end index (the element at the end index is excluded).","example":"array.slice(array.create(1,2,3,4,5), 1, 3) =\u003e [2,3]","name":"slice","return":{"type":"array","valueType":"any"}},{"args":[{"name":"items","type":"array","valueType":"any"}],"description":"Reverse array elements","example":"array.reverse(array.create(1,2)) =\u003e [2,1]","name":"reverse","return":{"type":"array","valueType":"any"}},{"args":[{"name":"items1","type":"array","valueType":"any"},{"name":"items2","type":"array","valueType":"any"}],"description":"Merge arrays into one","example":"array.merge(array.create(1,2), array.create(3,4)) =\u003e [1,2,3,4]","name":"merge","return":{"type":"array","valueType":"any"},"varArgs":true},{"args":[{"name":"items","type":"array","valueType":"any"},{"name":"depth","type":"int","value":-1}],"description":"Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth, default depth to -1 goes to no depth limit","example":"array.flatten(\"[1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]\", -1) =\u003e [1,2,3,4,5,6,7,8,9,10]","name":"flatten","return":{"type":"array","valueType":"any"}},{"args":[{"name":"input","required":false,"type":"array","valueType":"any"},{"name":"scopeName","required":false,"type":"string"},{"name":"filter","required":false,"type":"boolean"}],"description":"Specify a source array to iterate over or provide no arguments to create a single-item array.\nAccessing parent data in child array mappings:\n In order to access parent data in the child array mappings, you must provide scope name as a second argument in corresponding parent array.forEach mapping and then use $loop[PARENT_SCOPE_NAME].\u003cDATA_ATTRIBUTE\u003e to access corresponding data. To access data from current array, use $loop.\u003cDATA_ATTRIBUTE\u003e. \nConfiguring array filters:\n In order to use filter, you must provide scope name as a second argument and boolean condition as a third argument. You can use data from parent array using scope variable e.g. $loop[PARENT_SCOPE_NAME].\u003cDATA_ATTRIBUTE\u003e and/or from source array e.g. $loop.\u003cDATA_ATTRIBUTE\u003e in filter condition.","display":{"visible":true},"example":"array.forEach($flow.parameters.headers) =\u003e array \narray.forEach()=\u003e array \narray.forEach($flow.parameters.headers, \"headerScope\") =\u003e array \narray.forEach($flow.parameters.headers, \"headerScope\", $loop.Accept == \"application/json\") =\u003e array","name":"forEach","return":{"type":"array","valueType":"any"}}]}